on:
  push:
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+*"
  workflow_dispatch:  # 添加手动触发选项

permissions:
  contents: write

jobs:
  build-macos:
    runs-on: macos-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setting up Jetbrains Runtime
        shell: bash
        run: |
          set -Eeuo pipefail
          jdksPath="$HOME/.jdks"
          os="osx-x64"  # 确定为 macOS x86架构
          jdkFileName="jbrsdk_jcef-17.0.10-$os-b1207.14"
          jdkFileNameWithExt="$jdkFileName.tar.gz"
          link="https://cache-redirector.jetbrains.com/intellij-jbr/$jdkFileNameWithExt"
          echo "Downloading JDK from $link"
          curl --location "$link" --create-dirs --output "$jdksPath/$jdkFileNameWithExt"
          echo "Downloaded JDK to $jdksPath/$jdkFileNameWithExt"

          echo "Checking contents of $jdksPath"
          ls -la "$jdksPath"  # 显示 jdksPath 目录内容

          echo "Extracting JDK"
          tar -xf "$jdksPath/$jdkFileNameWithExt" -C "$jdksPath"
          echo "Extracted JDK contents"
          ls -la "$jdksPath"  # 显示解压后的 jdksPath 内容

          # 获取实际解压后的目录名(假设目录名是解压结果的第一项)
          extractedJdkDir=$(tar -tzf "$jdksPath/$jdkFileNameWithExt" | head -1 | cut -f1 -d"/")
          echo "Extracted JDK Directory: $extractedJdkDir"

          # 检查被解压后的实际目录是否存在
          if [ -d "$jdksPath/$extractedJdkDir" ]; then
            echo "JDK directory exists: $jdksPath/$extractedJdkDir"
          else
            echo "JDK directory does not exist: $jdksPath/$extractedJdkDir"
            exit 1
          fi

          echo "Setting JAVA_HOME and PATH"
          echo "JAVA_HOME=$jdksPath/$extractedJdkDir"
          echo "JAVA_HOME=$jdksPath/$extractedJdkDir" >> "$GITHUB_ENV"
          echo "PATH=$jdksPath/$extractedJdkDir/bin:$PATH" >> "$GITHUB_ENV"

      - name: Cache Gradle Dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: macos-gradle
          enableCrossOsArchive: true

      - name: Make Gradlew executable
        run: |
          chmod 755 ./gradlew
        shell: bash

      - name: Gradle
        continue-on-error: true
        run: |
          ./gradlew
        shell: bash

      - name: Build package for macOS using gradle
        shell: bash
        run: |
          ./gradlew desktop:app:createReleaseFolderForCi

      - name: Release Gradle to unlock cache files
        shell: bash
        run: |
          ./gradlew -stop

      - name: Upload output to artifacts
        uses: actions/upload-artifact@v4
        with:
          path: ./build/ci-release
          name: app-macos

  release:
    runs-on: macos-latest
    needs: ["build-macos"]
    steps:
      - uses: actions/download-artifact@v4
        name: Download All Artifacts Into One Directory
        with:
          path: release
          pattern: app-*
          merge-multiple: true

      - name: Version Info
        id: version
        uses: nowsprinting/check-version-format-action@v3
        with:
          prefix: "v"

      - name: Show the output tree of release
        run: |
          tree .

      - uses: softprops/action-gh-release@v2
        with:
          prerelease: ${{ !steps.version.outputs.is_stable }}
          make_latest: legacy
          files: |
            release/binaries/*
          body_path: release/release-notes.md

      - name: Remove artifacts to free space
        uses: geekyeggo/delete-artifact@v5
        with:
          name: app-*
